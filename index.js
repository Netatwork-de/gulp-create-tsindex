'use strict';

var through = require('through2');
var path = require('path');
var gutil = require('gulp-util');
var StringBuilder = require('stringbuilder');
var fs = require('fs');
var PluginError = gutil.PluginError;
var File = gutil.File;

module.exports = function(file, opt) {
	
	file = file || 'index.ts';  
	opt = opt || {};

	var fileName;
	var contentBuilder;
	var cwd;

	if (typeof file === 'string') {
		fileName = file;
	} else if (typeof file.path === 'string') {
		fileName = path.basename(file.path);
	} else {
		throw new PluginError('gulp-create-tsindex', 'Missing file for gulp-create-tsindex');
	}

	var outputFilePath = path.dirname(fileName);

	function bufferContents(file, enc, cb) {
			
		if (file.isNull()) {
			cb();
			return;
		}

		if (file.isStream()) {
			this.emit('error', new PluginError('gulp-create-tsindex',  'Streaming not supported'));
			cb();
			return;
		}
		
		var ext = path.extname(file.path);
		var ext2 = path.extname(path.basename(file.path, ext));
		
		if ((ext === ".ts" && ext2 !== ".d") || (ext === ".tsx")) {	
			if (!contentBuilder) {
				contentBuilder = new StringBuilder( {newline:'\r\n'} );
				contentBuilder.appendLine('// Generated by gulp-create-tsindex');
				contentBuilder.appendLine('// https://github.com/Netatwork-de/gulp-create-tsindex');
			}
			
			cwd = file.cwd;			
			
			contentBuilder.append('export * from "./');
			contentBuilder.append(path.relative(outputFilePath,file.path).replace(/\\/g, "/").replace(ext,""));
			contentBuilder.appendLine('";');
		}

		this.push(file);
		cb();
	}

	function endStream(cb) {
		
		if (!contentBuilder) {
			cb();
			return;
		}
					
		contentBuilder.build( (err,content) => {

			var indexFile = new File(
				{
					base: path.resolve(cwd, path.dirname(fileName)),
					path: path.resolve(cwd, fileName), 
					cwd: cwd,
					contents: new Buffer(content)
				});
						
			this.push(indexFile);
			gutil.log("Typescript index created");
			cb();
		});
	}

	return through.obj(bufferContents, endStream);
};
